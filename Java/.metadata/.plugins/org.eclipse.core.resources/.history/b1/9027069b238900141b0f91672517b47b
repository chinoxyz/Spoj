import java.io.*;
import java.math.*;


class CUBERT {
	
	public static BigInteger TWO=new BigInteger("2");
	public static BigDecimal EPS=new BigDecimal("1e-12");
	public static BigDecimal TD=new BigDecimal("2");
	public static BigDecimal THD=new BigDecimal("3");
	
	public static BigInteger biint(BigInteger n)
	{
		BigInteger l=BigInteger.ONE;
		BigInteger r=n;
		BigInteger midd;
		while(l.compareTo(r)<0)
		{
			midd=l.add(r).add(BigInteger.ONE).divide(TWO);
			if(midd.pow(3).compareTo(n)<=0)
			{
				l=midd;
			}
			else
			{
				r=midd.subtract(BigInteger.ONE);
			}
		}
		
		if(n.compareTo(BigInteger.ONE)<0)
		{
			l=BigInteger.ZERO;
		}
		
		return l;
	}
	
	public static BigDecimal calc(BigDecimal midd,BigDecimal a)
	{
		return midd.multiply(midd.multiply(midd.add(a.multiply(THD))).add(THD.multiply(a).multiply(a)));
	}
	
	public static BigDecimal bidec(BigDecimal x,BigDecimal a)
	{
		BigDecimal l=BigDecimal.ZERO;
		BigDecimal r=BigDecimal.ONE;
		BigDecimal midd;
		
		while(r.subtract(l).compareTo(EPS)>0)
		{
			midd=l.add(r).divide(TD);
			//System.out.println(midd);
			
			if(calc(midd,a).compareTo(x)<=0)
			{
				
				l=midd;
			}
			else
			{
				r=midd;
			}
		}
		return l;
	}
	
	public static void solve(BigDecimal n)
	{
		BigInteger ni=n.toBigInteger();
		BigInteger integg=biint(ni);
		BigDecimal id=new BigDecimal(integg);
		//System.out.println(integg);
		BigDecimal dec=bidec(n.subtract(id.pow(3)),id);
		dec=dec.setScale(10, BigDecimal.ROUND_DOWN);
		//System.out.println(dec);
		BigDecimal ans=id.add(dec);
		ans=ans.setScale(10, BigDecimal.ROUND_DOWN);
		
		int ct=0;
		
		String l=integg.toString();
		String r=dec.toPlainString();
		for(int i=0;i<l.length();++i)
		{
			ct+=l.charAt(i)-'0';
		}
		
		for(int i=0;i<r.length();++i)
		{
			ct+=r.charAt(i)-'0';
		}
		System.out.println(ans);
	}

	public static void main(String[] args) {
		try
		{
			BufferedReader br = null;
			br = new BufferedReader(new FileReader(".\\Text\\CUBERT.txt"));
			//br = new BufferedReader(new InputStreamReader(System.in));
			
			String s;
			int cases;
			BigDecimal n;
			
			while(true)
			{
				s=br.readLine();
				s.trim();
				if(s.equals(""))
				{
					continue;
				}
				cases=Integer.parseInt(s);
				break;
			}
			
			while(cases-- >0)
			{
				s=br.readLine();
				s.trim();
				if(s.equals(""))
				{
					++cases;
					continue;
				}
				
				n=new BigDecimal(s);
				solve(n);
			}
			
		}
		catch(Exception e)
		{
			
		}
	}

}
